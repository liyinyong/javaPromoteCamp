JVM:
    JVM，全称就是java-virtual-machine，java虚拟机，专门运行java程序的容器，支持跨平台。
    JVM自己管理内存释放，不需要手动释放，支持多种垃圾回收算法，不同版本支持不同的垃圾收集器。
    JVM可以通过配置各种参数设置jvm属性。
    JVm支持使用一些工具或者命令查看JVM情况。
NIO:
    NIO，即Non-Blocking-IO(非阻塞IO)，java里面也称为新IO，区别于BIO（Blocking-IO，阻塞IO）。
    核心区别在于IO模型上，由此延伸出IO的模型分类：阻塞IO模型，非阻塞IO模型，多路复用IO模型，信号驱动IO模型，异步IO模型。
    市面上使用最多的通信框架是netty。
并发编程：
    并发编程主要是多线程(线程，线程池)以及线程安全，为了保证线程安全由此衍生出锁（synchronized，lock），AQS（AbstractQueuedSynchronizer），并发工具类。
Spring 和 ORM 等框架
    spring，主要是IOC（控制反转）和AOP（面向切面编程）这两点为最核心技术点。
        IOC指的是spring自己维护bean的创建和销毁，不需要手动new一个bean。
        AOP方便横向切入业务逻辑，统一控制。
        动态代理
            cglib——子类
            jdk——接口
    ORM:
        数据库和对象之间建立映射，方便操作数据库，用户不需要关注太多数据库连接操作。
        主要核心技术点是反射和动态代理。
MySQL 数据库和 SQL
    mysql主要关注的是mysql的数据库引擎以及mysql索引的实现逻辑，方便进行SQL优化。
    sql主要关注的SQL的查询效率，主要是解决点是通过执行计划，查看数据量以及索引情况，然后进行针对优化，目标就是查询扫描行数尽量少。
分库分表
    受限于数据库性能，需要进行分库分表，分库分表主要是分成水平和垂直两方面的拆分，主流使用的框架是sharding-sphere，基本原理都是通过框架或中间件将原本多个物理库物理表封装成一个逻辑库，由中间件或框架帮忙操作数据库。
RPC 和微服务
    RPC，remote process call。主要是进行远程服务调用的，核心技术主要在网络通信，以及数据协议。
    微服务主要是将服务根据业务进行拆分，使得每个服务关注的业务尽量独立且小，每个服务的资源各自独立，松散低耦合。
分布式缓存
    缓存的作用是提高性能，快速读写，响应及时。分布式缓存主要是通过内存或其他高速存储来进行加速。分布式涉及并发，网络。同时需要关注分布式缓存常见的几个问题：
    穿透，击穿，雪崩。
分布式消息队列
    消息队列的作用是异步，削峰，解耦。核心内容数据一致性，可用性，可靠性，分布式事务。
